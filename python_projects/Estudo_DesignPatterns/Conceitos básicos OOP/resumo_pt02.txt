Major aspects of OOP:
>>Encapsulation;
>>Polymorphism;
>>Inheritance;
>>Abstraction;
>>Composition.

ENCAPSULATION:
>>Object’s behavior is kept hidden from the outside world (PRIVATE);
>>Clients CAN'T CHANGE the OBJECT’S INTERNAL STATE BY DIRECTLY ACTING ON THEM;
>>Clients NEEDS TO REQUEST OBJETCS by sending messages.
 Objects may changing their internal state by using member functions such as GET and SET;
>>In Python, the concept of encapsulation (data and method hiding) is not implicit;
 It doesn’t have keywords such as public, private, and protected (like C++ or JAVA).
>>The accessibility CAN BE made PRIVATE BY PREFIXING __ in the variable or function name.
  Example: "def __somefunction(self, var1, var2):"

POLYMORPHISM:
>>It can be of two types:
  >>>>STATIC: An object allows multiple methods implementations within the same class that use the same name but a different set of parameters;
      That is called METHOD OVERLOADING.
  >>>>The same interface can be used by objects of different types.
      Example: "+" operator on two integers: add;
               "+" operator on two string: concatenate.
>>In Python, polymorphism is a built-in feature;


INHERITANCE
>>One class derives functionality from the parent class;
>>Inheritance is described as an option to reuse functionality;
>>Creates hierarchy via the relationships among objects of different classes;
>>Python supports multiple inheritance;
Example:


ABSTRACTION
>>Provides a simple interface to the clients. Clients can interact with class objects and call methods defined in the interface;
>>It abstracts the complexity of internal classes. A client need not be aware of internal implementations.

COMPOSITION
>> A way to combine objects or classes into more complex data structures;
>> Used to call member functions in other modules thereby making base functionality available across modules without inheritance;


